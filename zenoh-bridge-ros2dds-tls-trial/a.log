[2m2025-05-18T14:46:46.222834Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T14:46:46.223609Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: 5202c699f1f28d5dd7cc695bf4fa8ae2, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tcp/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Dependent(ModeValues { router: Some([tcp/[::]:7447]), peer: Some([tcp/[::]:0]), client: None }), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: None, listen_private_key: None, listen_certificate: None, enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T14:46:46.223676Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: 5202c699f1f28d5dd7cc695bf4fa8ae2
[2m2025-05-18T14:46:46.223931Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T14:46:46.224200Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T14:46:46.224322Z[0m [32m INFO[0m                 main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T14:46:46.224336Z[0m [32m INFO[0m                 main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T14:46:46.225790Z[0m [32m INFO[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Zenoh can be reached at: tcp/192.168.100.10:7447
[2m2025-05-18T14:46:46.225917Z[0m [32m INFO[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m zenohd listening scout messages on 224.0.0.224:7446
[2m2025-05-18T14:46:46.232417Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m New ROS 2 bridge detected: c056f3eecb4118be410be530203922d9
[2m2025-05-18T14:46:46.480015Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds[0m[2m:[0m New ROS 2 bridge detected: 1ccc0305b4c4b73f20100e85dbf2db0
[2m2025-05-18T14:47:33.749330Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 announces Subscriber parameter_events - Allowed
[2m2025-05-18T14:47:33.749534Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Publisher (ROS:/parameter_events -> Zenoh:parameter_events) created
[2m2025-05-18T14:47:33.749572Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 announces Service Server talker/set_parameters_atomically - Allowed
[2m2025-05-18T14:47:33.749740Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/talker/set_parameters_atomically <-> Zenoh:talker/set_parameters_atomically) created
[2m2025-05-18T14:47:33.750434Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 announces Publisher parameter_events - Allowed
[2m2025-05-18T14:47:33.750556Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Subscriber (Zenoh:parameter_events -> ROS:/parameter_events) created
[2m2025-05-18T14:47:33.750581Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 announces Service Server talker/set_parameters - Allowed
[2m2025-05-18T14:47:33.750769Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/talker/set_parameters <-> Zenoh:talker/set_parameters) created
[2m2025-05-18T14:47:33.750795Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 announces Service Server talker/describe_parameters - Allowed
[2m2025-05-18T14:47:33.750948Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/talker/describe_parameters <-> Zenoh:talker/describe_parameters) created
[2m2025-05-18T14:47:33.750973Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 announces Publisher chatter - Allowed
[2m2025-05-18T14:47:33.751026Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Subscriber (Zenoh:chatter -> ROS:/chatter) created
[2m2025-05-18T14:47:33.751091Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 announces Service Server talker/list_parameters - Allowed
[2m2025-05-18T14:47:33.751242Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/talker/list_parameters <-> Zenoh:talker/list_parameters) created
[2m2025-05-18T14:47:33.751266Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 announces Service Server talker/get_parameter_types - Allowed
[2m2025-05-18T14:47:33.751407Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/talker/get_parameter_types <-> Zenoh:talker/get_parameter_types) created
[2m2025-05-18T14:47:33.751433Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 announces Publisher rosout - Allowed
[2m2025-05-18T14:47:33.751503Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Subscriber (Zenoh:rosout -> ROS:/rosout) created
[2m2025-05-18T14:47:33.751529Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 announces Service Server talker/get_parameters - Allowed
[2m2025-05-18T14:47:33.751791Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/talker/get_parameters <-> Zenoh:talker/get_parameters) created
[2m2025-05-18T14:47:39.351355Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 retires Publisher rosout - Allowed
[2m2025-05-18T14:47:39.351391Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Subscriber (Zenoh:rosout -> ROS:/rosout) removed
[2m2025-05-18T14:47:39.351631Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 retires Publisher chatter - Allowed
[2m2025-05-18T14:47:39.351651Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Subscriber (Zenoh:chatter -> ROS:/chatter) removed
[2m2025-05-18T14:47:39.352875Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 retires Subscriber parameter_events - Allowed
[2m2025-05-18T14:47:39.352901Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Publisher (ROS:/parameter_events -> Zenoh:parameter_events) removed
[2m2025-05-18T14:47:39.353918Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 retires Service Server talker/list_parameters - Allowed
[2m2025-05-18T14:47:39.353979Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/talker/list_parameters <-> Zenoh:talker/list_parameters) removed
[2m2025-05-18T14:47:39.356985Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 retires Service Server talker/describe_parameters - Allowed
[2m2025-05-18T14:47:39.357014Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/talker/describe_parameters <-> Zenoh:talker/describe_parameters) removed
[2m2025-05-18T14:47:39.359056Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 retires Service Server talker/set_parameters_atomically - Allowed
[2m2025-05-18T14:47:39.359084Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/talker/set_parameters_atomically <-> Zenoh:talker/set_parameters_atomically) removed
[2m2025-05-18T14:47:39.362189Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 retires Service Server talker/set_parameters - Allowed
[2m2025-05-18T14:47:39.362227Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/talker/set_parameters <-> Zenoh:talker/set_parameters) removed
[2m2025-05-18T14:47:39.362898Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 retires Service Server talker/get_parameter_types - Allowed
[2m2025-05-18T14:47:39.363084Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/talker/get_parameter_types <-> Zenoh:talker/get_parameter_types) removed
[2m2025-05-18T14:47:39.363870Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 retires Service Server talker/get_parameters - Allowed
[2m2025-05-18T14:47:39.363892Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/talker/get_parameters <-> Zenoh:talker/get_parameters) removed
[2m2025-05-18T14:47:39.364684Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 retires Publisher parameter_events - Allowed
[2m2025-05-18T14:47:39.364704Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Subscriber (Zenoh:parameter_events -> ROS:/parameter_events) removed
[2m2025-05-18T14:48:54.544255Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 announces Subscriber parameter_events - Allowed
[2m2025-05-18T14:48:54.544336Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Publisher (ROS:/parameter_events -> Zenoh:parameter_events) created
[2m2025-05-18T14:48:54.544357Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 announces Publisher parameter_events - Allowed
[2m2025-05-18T14:48:54.544404Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Subscriber (Zenoh:parameter_events -> ROS:/parameter_events) created
[2m2025-05-18T14:48:54.544520Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 announces Service Server talker/set_parameters_atomically - Allowed
[2m2025-05-18T14:48:54.544623Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/talker/set_parameters_atomically <-> Zenoh:talker/set_parameters_atomically) created
[2m2025-05-18T14:48:54.544644Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 announces Publisher chatter - Allowed
[2m2025-05-18T14:48:54.544690Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Subscriber (Zenoh:chatter -> ROS:/chatter) created
[2m2025-05-18T14:48:54.544926Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 announces Service Server talker/set_parameters - Allowed
[2m2025-05-18T14:48:54.545078Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/talker/set_parameters <-> Zenoh:talker/set_parameters) created
[2m2025-05-18T14:48:54.545101Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 announces Publisher rosout - Allowed
[2m2025-05-18T14:48:54.545160Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Subscriber (Zenoh:rosout -> ROS:/rosout) created
[2m2025-05-18T14:48:54.545493Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 announces Service Server talker/get_parameters - Allowed
[2m2025-05-18T14:48:54.545595Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/talker/get_parameters <-> Zenoh:talker/get_parameters) created
[2m2025-05-18T14:48:54.545613Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 announces Service Server talker/get_parameter_types - Allowed
[2m2025-05-18T14:48:54.545700Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/talker/get_parameter_types <-> Zenoh:talker/get_parameter_types) created
[2m2025-05-18T14:48:54.547587Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 announces Service Server talker/describe_parameters - Allowed
[2m2025-05-18T14:48:54.547732Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/talker/describe_parameters <-> Zenoh:talker/describe_parameters) created
[2m2025-05-18T14:48:54.547750Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 announces Service Server talker/list_parameters - Allowed
[2m2025-05-18T14:48:54.547855Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/talker/list_parameters <-> Zenoh:talker/list_parameters) created
[2m2025-05-18T14:48:59.558283Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 retires Publisher rosout - Allowed
[2m2025-05-18T14:48:59.558299Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Subscriber (Zenoh:rosout -> ROS:/rosout) removed
[2m2025-05-18T14:48:59.558467Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 retires Publisher chatter - Allowed
[2m2025-05-18T14:48:59.558478Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Subscriber (Zenoh:chatter -> ROS:/chatter) removed
[2m2025-05-18T14:48:59.559345Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 retires Subscriber parameter_events - Allowed
[2m2025-05-18T14:48:59.559357Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Publisher (ROS:/parameter_events -> Zenoh:parameter_events) removed
[2m2025-05-18T14:48:59.560716Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 retires Service Server talker/list_parameters - Allowed
[2m2025-05-18T14:48:59.560731Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/talker/list_parameters <-> Zenoh:talker/list_parameters) removed
[2m2025-05-18T14:48:59.561639Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 retires Service Server talker/describe_parameters - Allowed
[2m2025-05-18T14:48:59.561762Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/talker/describe_parameters <-> Zenoh:talker/describe_parameters) removed
[2m2025-05-18T14:48:59.564551Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 retires Service Server talker/set_parameters_atomically - Allowed
[2m2025-05-18T14:48:59.564683Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/talker/set_parameters_atomically <-> Zenoh:talker/set_parameters_atomically) removed
[2m2025-05-18T14:48:59.565587Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 retires Service Server talker/set_parameters - Allowed
[2m2025-05-18T14:48:59.565600Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/talker/set_parameters <-> Zenoh:talker/set_parameters) removed
[2m2025-05-18T14:48:59.565755Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 retires Service Server talker/get_parameter_types - Allowed
[2m2025-05-18T14:48:59.565766Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/talker/get_parameter_types <-> Zenoh:talker/get_parameter_types) removed
[2m2025-05-18T14:48:59.566537Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 retires Service Server talker/get_parameters - Allowed
[2m2025-05-18T14:48:59.566551Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/talker/get_parameters <-> Zenoh:talker/get_parameters) removed
[2m2025-05-18T14:48:59.568208Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 retires Publisher parameter_events - Allowed
[2m2025-05-18T14:48:59.568223Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Subscriber (Zenoh:parameter_events -> ROS:/parameter_events) removed
[2m2025-05-18T14:50:54.865062Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 announces Subscriber parameter_events - Allowed
[2m2025-05-18T14:50:54.865133Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Publisher (ROS:/parameter_events -> Zenoh:parameter_events) created
[2m2025-05-18T14:50:54.865156Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 announces Service Server talker/get_parameters - Allowed
[2m2025-05-18T14:50:54.865251Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/talker/get_parameters <-> Zenoh:talker/get_parameters) created
[2m2025-05-18T14:50:54.865372Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 announces Service Server talker/describe_parameters - Allowed
[2m2025-05-18T14:50:54.865482Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/talker/describe_parameters <-> Zenoh:talker/describe_parameters) created
[2m2025-05-18T14:50:54.865695Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 announces Publisher parameter_events - Allowed
[2m2025-05-18T14:50:54.865765Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Subscriber (Zenoh:parameter_events -> ROS:/parameter_events) created
[2m2025-05-18T14:50:54.865787Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 announces Service Server talker/list_parameters - Allowed
[2m2025-05-18T14:50:54.865915Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/talker/list_parameters <-> Zenoh:talker/list_parameters) created
[2m2025-05-18T14:50:54.865936Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 announces Publisher chatter - Allowed
[2m2025-05-18T14:50:54.865976Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Subscriber (Zenoh:chatter -> ROS:/chatter) created
[2m2025-05-18T14:50:54.865995Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 announces Publisher rosout - Allowed
[2m2025-05-18T14:50:54.866035Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Subscriber (Zenoh:rosout -> ROS:/rosout) created
[2m2025-05-18T14:50:54.866258Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 announces Service Server talker/get_parameter_types - Allowed
[2m2025-05-18T14:50:54.866407Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/talker/get_parameter_types <-> Zenoh:talker/get_parameter_types) created
[2m2025-05-18T14:50:54.866516Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 announces Service Server talker/set_parameters_atomically - Allowed
[2m2025-05-18T14:50:54.866749Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/talker/set_parameters_atomically <-> Zenoh:talker/set_parameters_atomically) created
[2m2025-05-18T14:50:54.866768Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 announces Service Server talker/set_parameters - Allowed
[2m2025-05-18T14:50:54.866913Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/talker/set_parameters <-> Zenoh:talker/set_parameters) created
[2m2025-05-18T14:51:00.469141Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge 1ccc0305b4c4b73f20100e85dbf2db0 announces Subscriber chatter - Allowed
[2m2025-05-18T14:51:00.469264Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Publisher (ROS:/chatter -> Zenoh:chatter) created
[2m2025-05-18T14:51:00.469285Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge 1ccc0305b4c4b73f20100e85dbf2db0 announces Subscriber parameter_events - Allowed
[2m2025-05-18T14:51:00.469988Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge 1ccc0305b4c4b73f20100e85dbf2db0 announces Service Server listener/list_parameters - Allowed
[2m2025-05-18T14:51:00.470135Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/listener/list_parameters <-> Zenoh:listener/list_parameters) created
[2m2025-05-18T14:51:00.470152Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge 1ccc0305b4c4b73f20100e85dbf2db0 announces Service Server listener/set_parameters - Allowed
[2m2025-05-18T14:51:00.470265Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/listener/set_parameters <-> Zenoh:listener/set_parameters) created
[2m2025-05-18T14:51:00.470283Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge 1ccc0305b4c4b73f20100e85dbf2db0 announces Service Server listener/describe_parameters - Allowed
[2m2025-05-18T14:51:00.470786Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/listener/describe_parameters <-> Zenoh:listener/describe_parameters) created
[2m2025-05-18T14:51:00.470845Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge 1ccc0305b4c4b73f20100e85dbf2db0 announces Publisher rosout - Allowed
[2m2025-05-18T14:51:00.470868Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge 1ccc0305b4c4b73f20100e85dbf2db0 announces Service Server listener/get_parameter_types - Allowed
[2m2025-05-18T14:51:00.470989Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/listener/get_parameter_types <-> Zenoh:listener/get_parameter_types) created
[2m2025-05-18T14:51:00.471012Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge 1ccc0305b4c4b73f20100e85dbf2db0 announces Service Server listener/set_parameters_atomically - Allowed
[2m2025-05-18T14:51:00.471130Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/listener/set_parameters_atomically <-> Zenoh:listener/set_parameters_atomically) created
[2m2025-05-18T14:51:00.471150Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge 1ccc0305b4c4b73f20100e85dbf2db0 announces Publisher parameter_events - Allowed
[2m2025-05-18T14:51:00.471166Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge 1ccc0305b4c4b73f20100e85dbf2db0 announces Service Server listener/get_parameters - Allowed
[2m2025-05-18T14:51:00.471271Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/listener/get_parameters <-> Zenoh:listener/get_parameters) created
[2m2025-05-18T14:51:06.557343Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge 1ccc0305b4c4b73f20100e85dbf2db0 retires Publisher rosout - Allowed
[2m2025-05-18T14:51:06.557640Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge 1ccc0305b4c4b73f20100e85dbf2db0 retires Subscriber chatter - Allowed
[2m2025-05-18T14:51:06.557676Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Publisher (ROS:/chatter -> Zenoh:chatter) removed
[2m2025-05-18T14:51:06.557699Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge 1ccc0305b4c4b73f20100e85dbf2db0 retires Subscriber parameter_events - Allowed
[2m2025-05-18T14:51:06.558609Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge 1ccc0305b4c4b73f20100e85dbf2db0 retires Service Server listener/list_parameters - Allowed
[2m2025-05-18T14:51:06.558627Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/listener/list_parameters <-> Zenoh:listener/list_parameters) removed
[2m2025-05-18T14:51:06.558770Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge 1ccc0305b4c4b73f20100e85dbf2db0 retires Service Server listener/describe_parameters - Allowed
[2m2025-05-18T14:51:06.559956Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/listener/describe_parameters <-> Zenoh:listener/describe_parameters) removed
[2m2025-05-18T14:51:06.560868Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge 1ccc0305b4c4b73f20100e85dbf2db0 retires Service Server listener/set_parameters_atomically - Allowed
[2m2025-05-18T14:51:06.560882Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/listener/set_parameters_atomically <-> Zenoh:listener/set_parameters_atomically) removed
[2m2025-05-18T14:51:06.562460Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge 1ccc0305b4c4b73f20100e85dbf2db0 retires Service Server listener/set_parameters - Allowed
[2m2025-05-18T14:51:06.562555Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/listener/set_parameters <-> Zenoh:listener/set_parameters) removed
[2m2025-05-18T14:51:06.563606Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge 1ccc0305b4c4b73f20100e85dbf2db0 retires Service Server listener/get_parameter_types - Allowed
[2m2025-05-18T14:51:06.563622Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/listener/get_parameter_types <-> Zenoh:listener/get_parameter_types) removed
[2m2025-05-18T14:51:06.564692Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge 1ccc0305b4c4b73f20100e85dbf2db0 retires Service Server listener/get_parameters - Allowed
[2m2025-05-18T14:51:06.564706Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/listener/get_parameters <-> Zenoh:listener/get_parameters) removed
[2m2025-05-18T14:51:06.565895Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge 1ccc0305b4c4b73f20100e85dbf2db0 retires Publisher parameter_events - Allowed
[2m2025-05-18T14:51:07.315439Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 retires Publisher rosout - Allowed
[2m2025-05-18T14:51:07.315464Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Subscriber (Zenoh:rosout -> ROS:/rosout) removed
[2m2025-05-18T14:51:07.315691Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 retires Publisher chatter - Allowed
[2m2025-05-18T14:51:07.315716Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Subscriber (Zenoh:chatter -> ROS:/chatter) removed
[2m2025-05-18T14:51:07.315855Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 retires Subscriber parameter_events - Allowed
[2m2025-05-18T14:51:07.315878Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Publisher (ROS:/parameter_events -> Zenoh:parameter_events) removed
[2m2025-05-18T14:51:07.316864Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 retires Service Server talker/list_parameters - Allowed
[2m2025-05-18T14:51:07.317033Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/talker/list_parameters <-> Zenoh:talker/list_parameters) removed
[2m2025-05-18T14:51:07.318393Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 retires Service Server talker/describe_parameters - Allowed
[2m2025-05-18T14:51:07.318420Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/talker/describe_parameters <-> Zenoh:talker/describe_parameters) removed
[2m2025-05-18T14:51:07.322885Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 retires Service Server talker/set_parameters_atomically - Allowed
[2m2025-05-18T14:51:07.323183Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/talker/set_parameters_atomically <-> Zenoh:talker/set_parameters_atomically) removed
[2m2025-05-18T14:51:07.323427Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 retires Service Server talker/set_parameters - Allowed
[2m2025-05-18T14:51:07.323676Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/talker/set_parameters <-> Zenoh:talker/set_parameters) removed
[2m2025-05-18T14:51:07.323711Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 retires Service Server talker/get_parameter_types - Allowed
[2m2025-05-18T14:51:07.323954Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/talker/get_parameter_types <-> Zenoh:talker/get_parameter_types) removed
[2m2025-05-18T14:51:07.324281Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 retires Service Server talker/get_parameters - Allowed
[2m2025-05-18T14:51:07.324348Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Service Client (ROS:/talker/get_parameters <-> Zenoh:talker/get_parameters) removed
[2m2025-05-18T14:51:07.324387Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote bridge c056f3eecb4118be410be530203922d9 retires Publisher parameter_events - Allowed
[2m2025-05-18T14:51:07.324407Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds::routes_mgr[0m[2m:[0m Route Subscriber (Zenoh:parameter_events -> ROS:/parameter_events) removed
[2m2025-05-18T16:52:14.295550Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds[0m[2m:[0m Remote ROS 2 bridge left: c056f3eecb4118be410be530203922d9
[2m2025-05-18T16:52:20.014230Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:52:20.016416Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: 7f46c666afc702162c6e93db0fee062c, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tcp/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: None, listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:52:20.016508Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: 7f46c666afc702162c6e93db0fee062c
[2m2025-05-18T16:52:20.017128Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:52:20.017933Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(03) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T16:52:20.019077Z[0m [32m INFO[0m                 main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:52:20.019096Z[0m [32m INFO[0m                 main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:52:20.020452Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T16:52:20.366685Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:52:20.367664Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: e3ec33a1c027f50111f1c8cf350479a9, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tcp/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: None, listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:52:20.368161Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: e3ec33a1c027f50111f1c8cf350479a9
[2m2025-05-18T16:52:20.368725Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:52:20.369874Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:52:20.369917Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:52:20.370373Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(07) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T16:52:20.370471Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T16:52:20.862046Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:52:20.863289Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: ce2fd1c11a5d9d655fb2c1a5b7e2f90c, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tcp/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: None, listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:52:20.863383Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: ce2fd1c11a5d9d655fb2c1a5b7e2f90c
[2m2025-05-18T16:52:20.863716Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:52:20.863969Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:52:20.863980Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:52:20.864119Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(09) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T16:52:20.865877Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T16:52:21.511469Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:52:21.512367Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: 75774b17ddd2fdade3501ac4bb98fa52, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tcp/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: None, listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:52:21.512473Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: 75774b17ddd2fdade3501ac4bb98fa52
[2m2025-05-18T16:52:21.512772Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:52:21.513057Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:52:21.513070Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:52:21.513105Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T16:52:21.513458Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T16:52:22.529056Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:52:22.529979Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: 8825c9e0fc14d4aa4c2835acbf0282c1, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tcp/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: None, listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:52:22.530055Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: 8825c9e0fc14d4aa4c2835acbf0282c1
[2m2025-05-18T16:52:22.530331Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:52:22.530593Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:52:22.530607Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:52:22.530620Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(07) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T16:52:22.534898Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T16:52:24.354407Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:52:24.355266Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: f601963127fb4510a983c3c5b3abd47a, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tcp/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: None, listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:52:24.355337Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: f601963127fb4510a983c3c5b3abd47a
[2m2025-05-18T16:52:24.355621Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:52:24.355884Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(07) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T16:52:24.355998Z[0m [32m INFO[0m                 main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:52:24.356008Z[0m [32m INFO[0m                 main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:52:24.356272Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T16:52:27.779495Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:52:27.780430Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: 7b7358674e4474b81933a7eff313fa64, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tcp/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: None, listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:52:27.780502Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: 7b7358674e4474b81933a7eff313fa64
[2m2025-05-18T16:52:27.780761Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:52:27.781087Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:52:27.781099Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:52:27.781492Z[0m [33m WARN[0m main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T16:52:34.370100Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:52:34.371013Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: 81eab7190d5807ff1822d769d0489548, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tcp/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: None, listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:52:34.371087Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: 81eab7190d5807ff1822d769d0489548
[2m2025-05-18T16:52:34.371374Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:52:34.371612Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:52:34.371622Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:52:34.371715Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T16:52:34.373034Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T16:53:33.079686Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:53:33.080664Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: db8c15e9610b38223af06f055f7730ac, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tcp/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: None, listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:53:33.080722Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: db8c15e9610b38223af06f055f7730ac
[2m2025-05-18T16:53:33.081003Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:53:33.081265Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:53:33.081275Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:53:33.081343Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T16:53:33.081725Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T16:53:33.396236Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:53:33.396800Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: db59a89d2d6de84412b32f05dfeff857, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tcp/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: None, listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:53:33.396887Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: db59a89d2d6de84412b32f05dfeff857
[2m2025-05-18T16:53:33.397131Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:53:33.397311Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:53:33.397319Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:53:33.397331Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T16:53:33.397567Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T16:53:33.828039Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:53:33.829156Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: 7754d7a02e0fdbef1356171d69a3792, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tcp/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: None, listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:53:33.829232Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: 7754d7a02e0fdbef1356171d69a3792
[2m2025-05-18T16:53:33.829493Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:53:33.829743Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:53:33.829755Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:53:33.829925Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(11) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T16:53:33.830275Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T16:53:34.460942Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:53:34.461841Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: eff8f572b9f001a395dfd20a43da8663, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tcp/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: None, listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:53:34.461932Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: eff8f572b9f001a395dfd20a43da8663
[2m2025-05-18T16:53:34.462224Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:53:34.462505Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:53:34.462518Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:53:34.462530Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T16:53:34.463205Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T16:53:35.514355Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:53:35.515233Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: c6df157ca825d93dff60479535649fa0, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tcp/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: None, listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:53:35.515313Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: c6df157ca825d93dff60479535649fa0
[2m2025-05-18T16:53:35.515578Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:53:35.515818Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:53:35.515839Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:53:35.516138Z[0m [33m WARN[0m main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T16:53:55.156589Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:53:55.157387Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: 99ca87ab8a78f940e81c8f765c627c1e, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tcp/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: None, listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:53:55.157450Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: 99ca87ab8a78f940e81c8f765c627c1e
[2m2025-05-18T16:53:55.157688Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:53:55.157928Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:53:55.157942Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:53:55.157945Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T16:53:55.158211Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T16:53:55.405934Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:53:55.406701Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: ad2b342c0739814e8947fdc7390d6030, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tcp/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: None, listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:53:55.406774Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: ad2b342c0739814e8947fdc7390d6030
[2m2025-05-18T16:53:55.407025Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:53:55.407261Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:53:55.407273Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:53:55.407281Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T16:53:55.407556Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T16:53:55.793967Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:53:55.794787Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: b4191767cf30a63070bc06688783bbd2, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tcp/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: None, listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:53:55.794880Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: b4191767cf30a63070bc06688783bbd2
[2m2025-05-18T16:53:55.795135Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:53:55.795365Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:53:55.795376Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:53:55.795393Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T16:53:55.795645Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T16:53:56.387333Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:53:56.388063Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: c7b896d4c145a28922fa817bd69740a7, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tcp/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: None, listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:53:56.388127Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: c7b896d4c145a28922fa817bd69740a7
[2m2025-05-18T16:53:56.388357Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:53:56.388604Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:53:56.388614Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:53:56.388624Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(03) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T16:53:56.388866Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T16:53:57.361284Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:53:57.362096Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: 87971769751f28005c63391a8f782c67, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tcp/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: None, listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:53:57.362168Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: 87971769751f28005c63391a8f782c67
[2m2025-05-18T16:53:57.362417Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:53:57.362613Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:53:57.362627Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:53:57.362628Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T16:53:57.362971Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T16:53:59.147546Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:53:59.148463Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: d82090de6ec75f888c2f1d227d15a9c9, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tcp/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: None, listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:53:59.148532Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: d82090de6ec75f888c2f1d227d15a9c9
[2m2025-05-18T16:53:59.148780Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:53:59.149025Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:53:59.149040Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:53:59.149041Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(02) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T16:53:59.149312Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T16:54:02.500794Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:54:02.501630Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: 58a74986d75f647d50041211beadd0ec, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tcp/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: None, listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:54:02.501712Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: 58a74986d75f647d50041211beadd0ec
[2m2025-05-18T16:54:02.501995Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:54:02.502263Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:54:02.502275Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:54:02.502279Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T16:54:02.502599Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T16:55:29.634535Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:55:29.635280Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: dbf7d01e9a01d3e7297e1aa95793da0a, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tls/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: None, listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:55:29.635331Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: dbf7d01e9a01d3e7297e1aa95793da0a
[2m2025-05-18T16:55:29.635558Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:55:29.635800Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:55:29.635812Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:55:29.635826Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(06) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T16:55:29.636151Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T16:55:29.880636Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:55:29.881454Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: 526b28331942cf34539d3e3279393809, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tls/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: None, listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:55:29.881529Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: 526b28331942cf34539d3e3279393809
[2m2025-05-18T16:55:29.881783Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:55:29.882038Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:55:29.882053Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:55:29.882054Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(09) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T16:55:29.882334Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T16:55:30.285121Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:55:30.286083Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: de86fb76f12952bb3f3adddcbe625e33, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tls/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: None, listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:55:30.286158Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: de86fb76f12952bb3f3adddcbe625e33
[2m2025-05-18T16:55:30.286422Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:55:30.286659Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:55:30.286671Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:55:30.286692Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(09) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T16:55:30.287022Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T16:55:30.850014Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:55:30.850816Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: 7f6140f923886851d6c0c640cee2cf95, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tls/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: None, listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:55:30.850957Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: 7f6140f923886851d6c0c640cee2cf95
[2m2025-05-18T16:55:30.851209Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:55:30.851436Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:55:30.851449Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:55:30.851452Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(09) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T16:55:30.851900Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T16:55:31.808001Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:55:31.808815Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: ec03b90edc7c005354010856cc1b1a48, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tls/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: None, listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:55:31.808885Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: ec03b90edc7c005354010856cc1b1a48
[2m2025-05-18T16:55:31.809113Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:55:31.809304Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:55:31.809315Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:55:31.809323Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T16:55:31.809614Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T16:55:34.830576Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:55:34.831349Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: 37b8695c5e5f8fa34f190b886edcbfc2, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tls/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: None, listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:55:34.831411Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: 37b8695c5e5f8fa34f190b886edcbfc2
[2m2025-05-18T16:55:34.831652Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:55:34.831918Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:55:34.831929Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:55:34.831934Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T16:55:34.832223Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T16:55:35.086258Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:55:35.087000Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: eb8a2326788218b336686e03c218be0f, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tls/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: None, listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:55:35.087054Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: eb8a2326788218b336686e03c218be0f
[2m2025-05-18T16:55:35.087323Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:55:35.087581Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:55:35.087592Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:55:35.087599Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(09) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T16:55:35.087939Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T16:55:35.577783Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:55:35.579424Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: 204b3701e9ac87752f3fbbcb14f05433, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tls/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: None, listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:55:35.579545Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: 204b3701e9ac87752f3fbbcb14f05433
[2m2025-05-18T16:55:35.579979Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:55:35.580406Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:55:35.580425Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:55:35.580440Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T16:55:35.580990Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T16:55:36.209563Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:55:36.210234Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: 16dd835695f1e5fc0489cc1a6dd02a21, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tls/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: None, listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:55:36.210291Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: 16dd835695f1e5fc0489cc1a6dd02a21
[2m2025-05-18T16:55:36.210507Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:55:36.210694Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:55:36.210704Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:55:36.210709Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T16:55:36.211015Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T16:55:58.924145Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:55:58.924994Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: 59b55930c541a23709e449a58b1e377e, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tls/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: Some("/root/mnt/server.crt"), listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:55:58.925055Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: 59b55930c541a23709e449a58b1e377e
[2m2025-05-18T16:55:58.925283Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:55:58.925510Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:55:58.925521Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:55:58.925525Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T16:55:58.925855Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T16:55:59.288070Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:55:59.289230Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: d79bc575ab9cbc74ea3080dfe1c2af27, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tls/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: Some("/root/mnt/server.crt"), listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:55:59.289333Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: d79bc575ab9cbc74ea3080dfe1c2af27
[2m2025-05-18T16:55:59.289688Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:55:59.290028Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:55:59.290049Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:55:59.290096Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(09) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T16:55:59.290618Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T16:55:59.753912Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:55:59.755063Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: 6a3f7e1d2823f7da90608431e98ba745, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tls/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: Some("/root/mnt/server.crt"), listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:55:59.755161Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: 6a3f7e1d2823f7da90608431e98ba745
[2m2025-05-18T16:55:59.755495Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:55:59.755802Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:55:59.755819Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:55:59.755846Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T16:55:59.756201Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T16:56:00.315036Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:56:00.315653Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: c8ea9a01c112299ca1126342b34a579d, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tls/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: Some("/root/mnt/server.crt"), listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:56:00.315734Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: c8ea9a01c112299ca1126342b34a579d
[2m2025-05-18T16:56:00.315980Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:56:00.316208Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:56:00.316218Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:56:00.316266Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(09) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T16:56:00.316520Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T16:56:01.285091Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:56:01.285876Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: 90d091f06b3511cd2fbe0655b238537e, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tls/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: Some("/root/mnt/server.crt"), listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:56:01.285948Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: 90d091f06b3511cd2fbe0655b238537e
[2m2025-05-18T16:56:01.286192Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:56:01.286404Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:56:01.286418Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:56:01.286428Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T16:56:01.286716Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T16:56:28.316103Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:56:28.316918Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: 6d0e43a74365c25a199d80c6e828f4ef, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tls/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: None, listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: Some("/root/mnt/server.crt"), connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:56:28.317017Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: 6d0e43a74365c25a199d80c6e828f4ef
[2m2025-05-18T16:56:28.317331Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:56:28.317908Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:56:28.317922Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:56:28.317928Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T16:56:28.318189Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T16:56:28.567522Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:56:28.568283Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: c66ad23efc663558fe7a11d965e89c98, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tls/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: None, listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: Some("/root/mnt/server.crt"), connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:56:28.568345Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: c66ad23efc663558fe7a11d965e89c98
[2m2025-05-18T16:56:28.568606Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:56:28.568835Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:56:28.568847Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:56:28.568869Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(09) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T16:56:28.569107Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T16:56:28.964007Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:56:28.965139Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: adb5bf47a48f92b92201968efe0bfe86, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tls/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: None, listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: Some("/root/mnt/server.crt"), connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:56:28.965231Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: adb5bf47a48f92b92201968efe0bfe86
[2m2025-05-18T16:56:28.965612Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:56:28.965983Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:56:28.966000Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:56:28.966034Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T16:56:28.966389Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T16:56:29.563546Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:56:29.564459Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: abc8d78996cfe60dec2101b28aa8d9fc, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tls/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: None, listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: Some("/root/mnt/server.crt"), connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:56:29.564525Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: abc8d78996cfe60dec2101b28aa8d9fc
[2m2025-05-18T16:56:29.564784Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:56:29.565027Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:56:29.565040Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:56:29.565057Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T16:56:29.565355Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T16:56:30.522059Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:56:30.522697Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: c06c4e5fb41a2fb9417b265c6cf720e, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tls/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: None, listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: Some("/root/mnt/server.crt"), connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:56:30.522766Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: c06c4e5fb41a2fb9417b265c6cf720e
[2m2025-05-18T16:56:30.523052Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:56:30.523283Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:56:30.523296Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:56:30.523303Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T16:56:30.523594Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T16:57:11.853326Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:57:11.854124Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: 6063d8a39c686c23407dfd8c6a45eb8, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tls/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: Some("/root/mnt/server.crt"), listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:57:11.854183Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: 6063d8a39c686c23407dfd8c6a45eb8
[2m2025-05-18T16:57:11.854373Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:57:11.854611Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:57:11.854622Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:57:11.854624Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T16:57:11.854937Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T16:57:12.265211Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:57:12.266457Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: ca9fcb8b9cee402585afc04a0d1cdc75, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tls/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: Some("/root/mnt/server.crt"), listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:57:12.266551Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: ca9fcb8b9cee402585afc04a0d1cdc75
[2m2025-05-18T16:57:12.266929Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:57:12.267280Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:57:12.267296Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:57:12.267305Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T16:57:12.267690Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T16:57:12.746092Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T16:57:12.747135Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: 87ae979510390dd2e58aa15fc94c823c, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tls/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: Some("/root/mnt/server.crt"), listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T16:57:12.747213Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: 87ae979510390dd2e58aa15fc94c823c
[2m2025-05-18T16:57:12.747504Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T16:57:12.747767Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T16:57:12.747781Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T16:57:12.747793Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(09) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T16:57:12.748122Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T17:00:34.477854Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T17:00:34.478684Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: c3e15a0377ab2a9693dceaf6b86f57c9, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tls/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: Some("/root/mnt/server.crt"), listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: Some(false), close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T17:00:34.478752Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: c3e15a0377ab2a9693dceaf6b86f57c9
[2m2025-05-18T17:00:34.479002Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T17:00:34.479255Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T17:00:34.479266Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T17:00:34.479376Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(06) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T17:00:34.479588Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T17:00:34.721758Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T17:00:34.722464Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: a43edf06b4c9caf84bf587bb9dd08af3, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tls/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: Some("/root/mnt/server.crt"), listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: Some(false), close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T17:00:34.722535Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: a43edf06b4c9caf84bf587bb9dd08af3
[2m2025-05-18T17:00:34.722915Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T17:00:34.723185Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T17:00:34.723198Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T17:00:34.723205Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T17:00:34.723482Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T17:00:35.126449Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T17:00:35.127278Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: bb5118414692d8335578805ac0637ee3, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tls/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: Some("/root/mnt/server.crt"), listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: Some(false), close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T17:00:35.127355Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: bb5118414692d8335578805ac0637ee3
[2m2025-05-18T17:00:35.127602Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T17:00:35.127801Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T17:00:35.127812Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T17:00:35.127828Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(07) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T17:00:35.128057Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T17:00:35.714098Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T17:00:35.714880Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: 6c08ac99cd036c80272fe2d035ac80e4, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tls/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: Some("/root/mnt/server.crt"), listen_private_key: Some("/root/mnt/server.key"), listen_certificate: Some("/root/mnt/server.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: Some(false), close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T17:00:35.714967Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: 6c08ac99cd036c80272fe2d035ac80e4
[2m2025-05-18T17:00:35.715235Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T17:00:35.715467Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T17:00:35.715480Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T17:00:35.715481Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T17:00:35.715769Z[0m [33m WARN[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Unable to open listener tls/0.0.0.0:7447: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.
Failed to start Zenoh runtime: Cannot create a new TLS listener on 0.0.0.0:7447. invalid peer certificate: Other(OtherError(UnsupportedCertVersion)) at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/utils.rs:249. at /home/runner/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zenoh-link-tls-1.3.4/src/unicast.rs:408.. Exiting...
[2m2025-05-18T17:13:53.141657Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T17:13:53.142531Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: c51040f7049179e74135a822ca336d8f, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tls/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: Some("/root/mnt/localhost.crt"), listen_private_key: Some("/root/mnt/localhost.key"), listen_certificate: Some("/root/mnt/localhost.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T17:13:53.142584Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: c51040f7049179e74135a822ca336d8f
[2m2025-05-18T17:13:53.142790Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T17:13:53.143019Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T17:13:53.143030Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T17:13:53.143048Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(07) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T17:13:53.143509Z[0m [32m INFO[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Zenoh can be reached at: tls/192.168.100.10:7447
[2m2025-05-18T17:13:53.143544Z[0m [32m INFO[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m zenohd listening scout messages on 224.0.0.224:7446
[2m2025-05-18T17:14:09.706854Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T17:14:09.707594Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: 1366d46501cceeda37656c6cc815146d, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tls/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: None, listen_private_key: Some("/root/mnt/localhost.key"), listen_certificate: Some("/root/mnt/localhost.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T17:14:09.707694Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: 1366d46501cceeda37656c6cc815146d
[2m2025-05-18T17:14:09.707985Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T17:14:09.708323Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T17:14:09.708335Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T17:14:09.708347Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T17:14:09.708957Z[0m [32m INFO[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Zenoh can be reached at: tls/192.168.100.10:7447
[2m2025-05-18T17:14:09.708989Z[0m [32m INFO[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m zenohd listening scout messages on 224.0.0.224:7446
[2m2025-05-18T17:15:09.393661Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T17:15:09.394503Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: e6c1dabf4bd33a59acd2527f566d02d5, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tls/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: None, listen_private_key: Some("/root/mnt/localhost.key"), listen_certificate: Some("/root/mnt/localhost.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T17:15:09.394577Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: e6c1dabf4bd33a59acd2527f566d02d5
[2m2025-05-18T17:15:09.394848Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T17:15:09.395097Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T17:15:09.395109Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T17:15:09.395131Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T17:15:09.395566Z[0m [32m INFO[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Zenoh can be reached at: tls/192.168.100.10:7447
[2m2025-05-18T17:15:09.395596Z[0m [32m INFO[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m zenohd listening scout messages on 224.0.0.224:7446
[2m2025-05-18T17:15:09.426606Z[0m [33m WARN[0m                acc-0 ThreadId(12) [2mzenoh_link_tls::unicast[0m[2m:[0m received fatal alert: UnknownCA. Hint: increase the system open file limit.
[2m2025-05-18T17:15:09.725087Z[0m [33m WARN[0m                acc-0 ThreadId(12) [2mzenoh_link_tls::unicast[0m[2m:[0m received fatal alert: UnknownCA. Hint: increase the system open file limit.
[2m2025-05-18T17:15:09.827009Z[0m [33m WARN[0m                acc-0 ThreadId(12) [2mzenoh_link_tls::unicast[0m[2m:[0m received fatal alert: UnknownCA. Hint: increase the system open file limit.
[2m2025-05-18T17:15:10.148923Z[0m [33m WARN[0m                acc-0 ThreadId(12) [2mzenoh_link_tls::unicast[0m[2m:[0m received fatal alert: UnknownCA. Hint: increase the system open file limit.
[2m2025-05-18T17:15:10.323517Z[0m [33m WARN[0m                acc-0 ThreadId(12) [2mzenoh_link_tls::unicast[0m[2m:[0m received fatal alert: UnknownCA. Hint: increase the system open file limit.
[2m2025-05-18T17:15:10.776043Z[0m [33m WARN[0m                acc-0 ThreadId(12) [2mzenoh_link_tls::unicast[0m[2m:[0m received fatal alert: UnknownCA. Hint: increase the system open file limit.
[2m2025-05-18T17:15:11.009293Z[0m [33m WARN[0m                acc-0 ThreadId(12) [2mzenoh_link_tls::unicast[0m[2m:[0m received fatal alert: UnknownCA. Hint: increase the system open file limit.
[2m2025-05-18T17:15:11.873971Z[0m [33m WARN[0m                acc-0 ThreadId(12) [2mzenoh_link_tls::unicast[0m[2m:[0m received fatal alert: UnknownCA. Hint: increase the system open file limit.
[2m2025-05-18T17:15:12.058025Z[0m [33m WARN[0m                acc-0 ThreadId(12) [2mzenoh_link_tls::unicast[0m[2m:[0m received fatal alert: UnknownCA. Hint: increase the system open file limit.
[2m2025-05-18T17:15:13.687947Z[0m [33m WARN[0m                acc-0 ThreadId(12) [2mzenoh_link_tls::unicast[0m[2m:[0m received fatal alert: UnknownCA. Hint: increase the system open file limit.
[2m2025-05-18T17:15:13.873132Z[0m [33m WARN[0m                acc-0 ThreadId(12) [2mzenoh_link_tls::unicast[0m[2m:[0m received fatal alert: UnknownCA. Hint: increase the system open file limit.
[2m2025-05-18T17:15:17.126512Z[0m [33m WARN[0m                acc-0 ThreadId(12) [2mzenoh_link_tls::unicast[0m[2m:[0m received fatal alert: UnknownCA. Hint: increase the system open file limit.
[2m2025-05-18T17:15:17.317247Z[0m [33m WARN[0m                acc-0 ThreadId(12) [2mzenoh_link_tls::unicast[0m[2m:[0m received fatal alert: UnknownCA. Hint: increase the system open file limit.
[2m2025-05-18T17:15:23.706489Z[0m [33m WARN[0m                acc-0 ThreadId(12) [2mzenoh_link_tls::unicast[0m[2m:[0m received fatal alert: UnknownCA. Hint: increase the system open file limit.
[2m2025-05-18T17:15:23.893546Z[0m [33m WARN[0m                acc-0 ThreadId(12) [2mzenoh_link_tls::unicast[0m[2m:[0m received fatal alert: UnknownCA. Hint: increase the system open file limit.
[2m2025-05-18T17:16:12.657391Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T17:16:12.659280Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: 1f2dcf62986c178fb15e61b86ac6d1f3, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tls/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: None, listen_private_key: Some("/root/mnt/localhost.key"), listen_certificate: Some("/root/mnt/localhost.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T17:16:12.659396Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: 1f2dcf62986c178fb15e61b86ac6d1f3
[2m2025-05-18T17:16:12.659675Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T17:16:12.660203Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T17:16:12.660219Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T17:16:12.660869Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(09) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T17:16:12.660939Z[0m [32m INFO[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Zenoh can be reached at: tls/192.168.100.10:7447
[2m2025-05-18T17:16:12.661022Z[0m [32m INFO[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m zenohd listening scout messages on 224.0.0.224:7446
[2m2025-05-18T17:16:12.665455Z[0m [33m WARN[0m                acc-0 ThreadId(12) [2mzenoh_link_tls::unicast[0m[2m:[0m received fatal alert: UnknownCA. Hint: increase the system open file limit.
[2m2025-05-18T17:16:12.767290Z[0m [33m WARN[0m                acc-0 ThreadId(12) [2mzenoh_link_tls::unicast[0m[2m:[0m received fatal alert: UnknownCA. Hint: increase the system open file limit.
[2m2025-05-18T17:16:12.951930Z[0m [33m WARN[0m                acc-0 ThreadId(12) [2mzenoh_link_tls::unicast[0m[2m:[0m received fatal alert: UnknownCA. Hint: increase the system open file limit.
[2m2025-05-18T17:16:13.078140Z[0m [33m WARN[0m                acc-0 ThreadId(12) [2mzenoh_link_tls::unicast[0m[2m:[0m received fatal alert: UnknownCA. Hint: increase the system open file limit.
[2m2025-05-18T17:16:13.347935Z[0m [33m WARN[0m                acc-0 ThreadId(12) [2mzenoh_link_tls::unicast[0m[2m:[0m received fatal alert: UnknownCA. Hint: increase the system open file limit.
[2m2025-05-18T17:16:13.517352Z[0m [33m WARN[0m                acc-0 ThreadId(12) [2mzenoh_link_tls::unicast[0m[2m:[0m received fatal alert: UnknownCA. Hint: increase the system open file limit.
[2m2025-05-18T17:16:14.083197Z[0m [33m WARN[0m                acc-0 ThreadId(12) [2mzenoh_link_tls::unicast[0m[2m:[0m received fatal alert: UnknownCA. Hint: increase the system open file limit.
[2m2025-05-18T17:16:14.188265Z[0m [33m WARN[0m                acc-0 ThreadId(12) [2mzenoh_link_tls::unicast[0m[2m:[0m received fatal alert: UnknownCA. Hint: increase the system open file limit.
[2m2025-05-18T17:16:15.066012Z[0m [33m WARN[0m                acc-0 ThreadId(12) [2mzenoh_link_tls::unicast[0m[2m:[0m received fatal alert: UnknownCA. Hint: increase the system open file limit.
[2m2025-05-18T17:16:15.215229Z[0m [33m WARN[0m                acc-0 ThreadId(12) [2mzenoh_link_tls::unicast[0m[2m:[0m received fatal alert: UnknownCA. Hint: increase the system open file limit.
[2m2025-05-18T17:16:16.855803Z[0m [33m WARN[0m                acc-0 ThreadId(12) [2mzenoh_link_tls::unicast[0m[2m:[0m received fatal alert: UnknownCA. Hint: increase the system open file limit.
[2m2025-05-18T17:40:13.102021Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m zenoh-bridge-ros2dds v1.3.4
[2m2025-05-18T17:40:13.102918Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh_bridge_ros2dds[0m[2m:[0m Zenoh Config(Config { id: eb5763e748f1862c252ebd3121b3fffe, metadata: Null, mode: Some(Router), connect: ConnectConfig { timeout_ms: None, endpoints: Unique([tls/localhost:7447]), exit_on_failure: None, retry: None }, listen: ListenConfig { timeout_ms: None, endpoints: Unique([tls/0.0.0.0:7447]), exit_on_failure: None, retry: None }, open: OpenConf { return_conditions: ReturnConditionsConf { connect_scouted: None, declares: None } }, scouting: ScoutingConf { timeout: None, delay: None, multicast: ScoutingMulticastConf { enabled: None, address: None, interface: None, ttl: None, autoconnect: None, autoconnect_strategy: None, listen: None }, gossip: GossipConf { enabled: None, multihop: None, target: None, autoconnect: None, autoconnect_strategy: None } }, timestamping: TimestampingConf { enabled: Some(Unique(true)), drop_future_timestamp: None }, queries_default_timeout: None, routing: RoutingConf { router: RouterRoutingConf { peers_failover_brokering: None }, peer: PeerRoutingConf { mode: None }, interests: InterestsConf { timeout: None } }, aggregation: AggregationConf { subscribers: [], publishers: [] }, qos: QoSConfig { publication: PublisherQoSConfList([]), network: [] }, transport: TransportConf { unicast: TransportUnicastConf { open_timeout: 10000, accept_timeout: 10000, accept_pending: 100, max_sessions: 1000, max_links: 1, lowlatency: false, qos: QoSUnicastConf { enabled: true }, compression: CompressionUnicastConf { enabled: false } }, multicast: TransportMulticastConf { join_interval: Some(2500), max_sessions: Some(1000), qos: QoSMulticastConf { enabled: false }, compression: CompressionMulticastConf { enabled: false } }, link: TransportLinkConf { protocols: None, tx: LinkTxConf { sequence_number_resolution: U32, lease: 10000, keep_alive: 4, batch_size: 65535, queue: QueueConf { size: QueueSizeConf { control: 2, real_time: 2, interactive_high: 2, interactive_low: 2, data_high: 2, data: 2, data_low: 2, background: 2 }, congestion_control: CongestionControlConf { drop: CongestionControlDropConf { wait_before_drop: 1000, max_wait_before_drop_fragments: 50000 }, block: CongestionControlBlockConf { wait_before_close: 5000000 } }, batching: BatchingConf { enabled: true, time_limit: 1 }, allocation: QueueAllocConf { mode: Lazy } }, threads: 2 }, rx: LinkRxConf { buffer_size: 65535, max_message_size: 1073741824 }, tls: TLSConf { root_ca_certificate: None, listen_private_key: Some("/root/mnt/192.168.100.10.key"), listen_certificate: Some("/root/mnt/192.168.100.10.crt"), enable_mtls: None, connect_private_key: None, connect_certificate: None, verify_name_on_connect: None, close_link_on_expiration: None, so_sndbuf: None, so_rcvbuf: None, root_ca_certificate_base64: None, listen_private_key_base64: None, listen_certificate_base64: None, connect_private_key_base64: None, connect_certificate_base64: None }, tcp: TcpConf { so_sndbuf: None, so_rcvbuf: None }, unixpipe: UnixPipeConf { file_access_mask: None } }, shared_memory: ShmConf { enabled: true, mode: Lazy }, auth: AuthConf { usrpwd: UsrPwdConf { user: None, password: None, dictionary_file: None }, pubkey: PubKeyConf { public_key_pem: None, private_key_pem: None, public_key_file: None, private_key_file: None, key_size: None, known_keys_file: None } } }, adminspace: AdminSpaceConf { enabled: true, permissions: PermissionsConf { read: true, write: false } }, namespace: None, downsampling: [], access_control: AclConfig { enabled: false, default_permission: Deny, rules: None, subjects: None, policies: None }, low_pass_filter: [], plugins_loading: PluginsLoading { enabled: true, search_dirs: LibSearchDirs([Spec(LibSearchSpec { kind: CurrentExeParent, value: None }), Path("."), Path("~/.zenoh/lib"), Path("/opt/homebrew/lib"), Path("/usr/local/lib"), Path("/usr/lib")]) }, plugins: Object {"ros2dds": Object {"domain": Number(3), "ros_localhost_only": Bool(false)}} })
[2m2025-05-18T17:40:13.102987Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::net::runtime[0m[2m:[0m Using ZID: eb5763e748f1862c252ebd3121b3fffe
[2m2025-05-18T17:40:13.103180Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Starting required plugin "ros2dds"
[2m2025-05-18T17:40:13.103371Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Successfully started plugin ros2dds from "__static_lib__"
[2m2025-05-18T17:40:13.103386Z[0m [32m INFO[0m main ThreadId(01) [2mzenoh::api::loader[0m[2m:[0m Finished loading plugins
[2m2025-05-18T17:40:13.103394Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m ROS2 plugin Config { namespace: "/", nodename: "zenoh_bridge_ros2dds", domain: 3, ros_localhost_only: false, ros_automatic_discovery_range: None, ros_static_peers: None, allowance: None, pub_max_frequencies: [], transient_local_cache_multiplier: 10, queries_timeout: Some(QueriesTimeouts { default: 5.0, transient_local_subscribers: [], services: [], actions: Some(ActionsTimeouts { send_goal: [], cancel_goal: [], get_result: [(Regex(".*"), 300.0)] }) }), reliable_routes_blocking: true, pub_priorities: [], work_thread_num: 2, max_block_thread_num: 50, __required__: None, __path__: None }
[2m2025-05-18T17:40:13.104088Z[0m [32m INFO[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m Zenoh can be reached at: tls/192.168.100.10:7447
[2m2025-05-18T17:40:13.104125Z[0m [32m INFO[0m                 main ThreadId(01) [2mzenoh::net::runtime::orchestrator[0m[2m:[0m zenohd listening scout messages on 224.0.0.224:7446
[2m2025-05-18T17:40:13.113980Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(04) [2mzenoh_plugin_ros2dds[0m[2m:[0m New ROS 2 bridge detected: 6879f911f76d4e6ae9d09178e37a98ff
[2m2025-05-18T17:40:13.134286Z[0m [32m INFO[0m tokio-runtime-worker ThreadId(08) [2mzenoh_plugin_ros2dds[0m[2m:[0m New ROS 2 bridge detected: 95b69278548ac0deb3280fec3f68dde9
